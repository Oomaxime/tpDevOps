#  https://github.com/Oomaxime/tpDevOps


name: PHP Composer

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{secrets.DB_NAME}}
          POSTGRES_USER: ${{secrets.BD_USERNAME}}
          POSTGRES_PASSWORD: ${{secrets.BD_PASS}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5     
          
    steps:
    - uses: actions/checkout@v4

    # https://github.com/marketplace/actions/setup-php-environment
    - name: Setup PHP environment
      uses: nanasess/setup-php@v4.1.0
      with:
        php-version: '8.2'
    
    - name: Validate composer.json and composer.lock
      run: composer validate --strict
    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
  
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress
      
    - name: Initialize test database
      run: |
        psql -h localhost -U postgres -d ${{secrets.DB_NAME}} -f docker/postgres/init.sql
      env:
        PGPASSWORD: ${{ secrets.DB_PASS}}

    - name: Verify database connection
      run: |
        php -r "
          \$dbh = new PDO('pgsql:host=localhost;dbname=todo_db', 'postgres', '${{secrets.DB_PASS}}');
          echo 'Database connection successful\n';
          \$result = \$dbh->query('SELECT COUNT(*) FROM tasks');
          echo 'Number of tasks: ' . \$result->fetchColumn();
        "
    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # Docs: https://getcomposer.org/doc/articles/scripts.md
    - name: Run test suite
      run: composer run-script test
      env:
          DB_HOST: localhost
          DB_NAME: ${{secrets.DB_NAME}}
          DB_USER: ${{secrets.BD_USERNAME}}
          DB_PASSWORD: ${{secrets.BD_PASS}}

      # Run PHPUnit tests
    - name: Run PHPUnit tests
      run: composer run-script test
      env:
        DB_CONNECTION: pgsql
        DB_HOST: localhost
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.BD_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASS }}